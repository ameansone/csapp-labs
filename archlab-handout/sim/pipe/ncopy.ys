#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion

    xorq    %rax,           %rax		# count = 0;
    irmovq  $-1,            %r8
    irmovq  $1,             %r9
    irmovq  $-6,            %r12
    irmovq  $5,             %r13
    irmovq  $0x30,          %r14
    jmp     While

JMP_6:
    mrmovq  $8(%rdi),       %r11
    rmmovq  %r10,           $(%rsi)
    andq    %r10,           %r10
    jle     JMP_6_1
    addq    %r9,            %rax
JMP_6_1:
    mrmovq  $16(%rdi),      %r10
    rmmovq  %r11,           $8(%rsi)
    andq    %r11,           %r11
    jle     JMP_6_2
    addq    %r9,            %rax
JMP_6_2:
    mrmovq  $24(%rdi),      %r11
    rmmovq  %r10,           $16(%rsi)
    andq    %r10,           %r10
    jle     JMP_6_3
    addq    %r9,            %rax
JMP_6_3:
    mrmovq  $32(%rdi),      %r10
    rmmovq  %r11,           $24(%rsi)
    andq    %r11,           %r11
    jle     JMP_6_4
    addq    %r9,            %rax
JMP_6_4:
    mrmovq  $40(%rdi),      %r11
    rmmovq  %r10,           $32(%rsi)
    andq    %r10,           %r10
    jle     JMP_6_5
    addq    %r9,            %rax
JMP_6_5:
    rmmovq  %r11,           $40(%rsi)
    andq    %r11,           %r11
    jle     JMP_6_6
    addq    %r9,            %rax
JMP_6_6:
    addq   %r14,            %rdi
    addq   %r14,            %rsi

While:
    mrmovq  (%rdi),         %r10
    addq    %r12,           %rdx
    jge     JMP_6
    addq    %r13,           %rdx
    je      JMP_1
    addq    %r8,            %rdx
    je      JMP_2
    addq    %r8,            %rdx
    je      JMP_3
    addq    %r8,            %rdx
    je      JMP_4
    addq    %r8,            %rdx
    je      JMP_5
    ret

JMP_5:
    mrmovq  $8(%rdi),       %r11
    rmmovq  %r10,           (%rsi)
    andq    %r10,           %r10
    jle     JMP_5_1
    addq    %r9,            %rax
JMP_5_1:
    mrmovq  $16(%rdi),      %r10
    rmmovq  %r11,           $8(%rsi)
    andq    %r11,           %r11
    jle     JMP_5_2
    addq    %r9,            %rax
JMP_5_2:
    mrmovq  $24(%rdi),      %r11
    rmmovq  %r10,           $16(%rsi)
    andq    %r10,           %r10
    jle     JMP_5_3
    addq    %r9,            %rax
JMP_5_3:
    mrmovq  $32(%rdi),      %r10
    rmmovq  %r11,           $24(%rsi)
    andq    %r11,           %r11
    jle     JMP_5_4
    addq    %r9,            %rax
JMP_5_4:
    rmmovq  %r10,           $32(%rsi)
    andq    %r10,           %r10
    jle     JMP_5_5
    addq    %r9,            %rax
JMP_5_5:
    ret

JMP_4:
    mrmovq  $8(%rdi),       %r11
    rmmovq  %r10,           (%rsi)
    andq    %r10,           %r10
    jle     JMP_4_1
    addq    %r9,            %rax
JMP_4_1:
    mrmovq  $16(%rdi),      %r10
    rmmovq  %r11,           $8(%rsi)
    andq    %r11,           %r11
    jle     JMP_4_2
    addq    %r9,            %rax
JMP_4_2:
    mrmovq  $24(%rdi),      %r11
    rmmovq  %r10,           $16(%rsi)
    andq    %r10,           %r10
    jle     JMP_4_3
    addq    %r9,            %rax
JMP_4_3:
    rmmovq  %r11,           $24(%rsi)
    andq    %r11,           %r11
    jle     JMP_4_4
    addq    %r9,            %rax
JMP_4_4:
    ret

JMP_3:
    mrmovq  $8(%rdi),       %r11
    rmmovq  %r10,           (%rsi)
    andq    %r10,           %r10
    jle     JMP_3_1
    addq    %r9,            %rax
JMP_3_1:
    mrmovq  $16(%rdi),      %r10
    rmmovq  %r11,           $8(%rsi)
    andq    %r11,           %r11
    jle     JMP_3_2
    addq    %r9,            %rax
JMP_3_2:
    rmmovq  %r10,           $16(%rsi)
    andq    %r10,           %r10
    jle     JMP_3_3
    addq    %r9,            %rax
JMP_3_3:
    ret

JMP_2:
    mrmovq  $8(%rdi),       %r11
    rmmovq  %r10,           (%rsi)
    andq    %r10,           %r10
    jle     JMP_2_1
    addq    %r9,            %rax
JMP_2_1:
    rmmovq  %r11,           $8(%rsi)
    andq    %r11,           %r11
    jle     JMP_2_2
    addq    %r9,            %rax
JMP_2_2:
    ret

JMP_1:
    rmmovq  %r10,           (%rsi)
    andq    %r10,           %r10
    jle     JMP_1_1
    addq    %r9,            %rax
JMP_1_1:

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
